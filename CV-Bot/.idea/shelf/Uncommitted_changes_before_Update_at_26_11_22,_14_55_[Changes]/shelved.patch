Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\nimport spacy\n\n\n# currently loading spacy during every execution\n\n\n# checks if the given input of the user actually contains the necessary information\n\n\ndef format_data(data, all_data, types):\n    formated_data = []\n    if len(data) % len(types) != 0:\n        all_data_text = \" \".join([d.text for d in all_data])\n        data_text = \" \".join([d.text for d in data])\n        types_text = \", \".join([t for t in types])\n        raise Exception(\"format_data: Looked for \" + types_text + \" Found \" + str(\n            len(data)) + \" data, which isn't possible to put into \" + len(\n            types) + \" fields.\" + \"\\n data: \" + data_text + \"\\n all data: \" + all_data_text)\n\n    for i in range(len(data) % len(types)):\n        current_data_set = data[(i * len(types)):((i + 1) * len(types))]\n\n        formated_data.append(data[(i * len(types)):((i + 1) * len(types))])\n\n\n# filter for valid inputs by user\nname_re = \"([A-Z]|[a-z])[a-z]+ ([A-Z]|[a-z])[a-z]+( ([A-Z]|[a-z])[a-z]+)*\"\ndate_re = \"([0-3]?[0-9].[0-1]?[0-9].[1-2][0-9][0-9][0-9])|([0-3]?[0-9]/[0-1]?[0-9]/[1-2][0-9][0-9][0-9])\"\nmail_re = \".+@.+\\..+\"\naddress_re = \"[A-Z][a-z]*.? [0-9]*\"\neduc_re = None\nexper_re = None\nsocial_re = None\nskills_re = None\ninterests_re = None\n\n\ndef to_string(t):\n    return \" \".join(t)\n\n\ndef print_cv(user_data):\n    indent = \"   \"\n    cv = \"C I R R I C U L U M   V I T A E\\n\"\n    for stage in data.keys():\n        contains_data = False\n        stage_text = stage + \":\\n\"\n        for sub_headline in user_data[stage].keys():\n            if user_data[stage][sub_headline][data_num] != None:\n                contains_data = True\n                stage_text += indent + sub_headline + \":\\n\"\n                stage_text += indent + indent + user_data[stage][sub_headline][data_num] + \"\\n\"\n        if contains_data:\n            cv += stage_text + \"\\n\"\n    print(cv)\n\n\ndata = {\"Personal Data\":\n    {\n        \"Name\": [\"What is your full name?\", {(\"PERSON\", \"\"): None}],\n        \"Birthdate\": [\"What is your date of birth?\", {(\"DATE\", \"CARDINAL\"): None}],\n        \"E-Mail\": [\"Please tell me your email.\", lambda t: re.search(mail_re, t).group(), None],\n        \"Address\": [\"Please state your address.\", lambda t: re.search(address_re, t).group(), None]\n    },\n    \"Education\":\n        {\n            \"Education_history\": [\"Please state your educational steps in the form of a \"\n                                  \"continuous text. For each educational step please enter a time frame, \"\n                                  \"the educational step and the name of the teaching institution\",\n                                  {(\"DATE\", \"CARDINAL\"): None,\n                                   (\"DATE\", \"CARDINAL\"): None,\n                                   (\"ORG\", \"\"): None}]\n        },\n    \"Experience\":\n        {\n            \"Experience_history\": [\"Please state your work experience steps in bullet points or in the form of a \"\n                                   \"continuous text.\",\n                                   {(\"DATE\", \"CARDINAL\"): None,\n                                    (\"DATE\", \"CARDINAL\"): None,\n                                    (\"ORG\", \"\"): None}]\n        },\n    \"Social Engagement\":\n        {\n            \"Social_history\": [\"Please state your social engagements steps in bullet points or in the form of a \"\n                               \"continuous text.\",\n                               {(\"DATE\", \"CARDINAL\"): None,\n                                (\"DATE\", \"CARDINAL\"): None,\n                                (\"ORG\", \"\"): None}]\n        },\n    \"Skills\":\n        {\n            \"Skills\": [\"Please state your work experience steps in bullet points or in the form of a \"\n                       \"continuous text.\",\n                       {(\"DATE\", \"CARDINAL\"): None,\n                        (\"DATE\", \"CARDINAL\"): None,\n                        (\"ORG\", \"\"): None}]\n        },\n    \"Interests\":\n        {\n            \"Interests\": [\"If you would like to state any personal interests in your CV please enter them here: \",\n                          {(\"DATE\", \"CARDINAL\"): None,\n                           (\"DATE\", \"CARDINAL\"): None,\n                           (\"ORG\", \"\"): None}]\n        },\n}\n# data = {\"Personal Data\":\n#     {\n#         \"Name\": [\"What is your full name?\", lambda doc: get_data(1, [\"PERSON\"], doc, to_string), None],\n#         \"Birthdate\": [\"What is your date of birth?\", lambda doc: get_data(1, [\"DATE\", \"CARDINAL\"], doc, to_string),\n#                       None],\n#         \"E-Mail\": [\"Please tell me your email.\", lambda t: re.search(mail_re, t).group(), None],\n#         \"Address\": [\"Please state your address.\", lambda t: re.search(address_re, t).group(), None]\n#         # TODO Train spaCY on adresses\n#     },\n#     \"Education\":\n#         {\n#             \"Education_history\": [\"Please state your educational steps in the form of a \"\n#                                   \"continuous text. For each educational step please enter a time frame, \"\n#                                   \"the educational step and the name of the teaching institution\",\n#                                   lambda doc: get_data(-1, [\"DATE\", \"ORG\"], doc, to_string), None]\n#         },\n#     \"Experience\":\n#         {\n#             \"Experience_history\": [\"Please state your work experience steps in bullet points or in the form of a \"\n#                                    \"continuous text.\", lambda x: x, None]\n#         },\n#     \"Social Engagement\":\n#         {\n#             \"Social_history\": [\"Please state your social engagements steps in bullet points or in the form of a \"\n#                                \"continuous text.\", lambda x: x, None]\n#         },\n#     \"Skills\":\n#         {\n#             \"Skills\": [\"Please state your work experience steps in bullet points or in the form of a \"\n#                        \"continuous text.\", lambda x: x, None]\n#         },\n#     \"Interests\":\n#         {\n#             \"Interests\": [\"If you would like to state any personal interests in your CV please enter them here: \",\n#                           lambda x: x, None]\n#         },\n# }\ndebug_data = {\"Personal Data\":\n    {\n        \"Name\": \"Max Mustermann\",\n        \"Birthdate\": \"20.12.2017\",\n        \"E-Mail\": \"abc@gmail.com\",\n        \"Address\": \"Bauerstr. 4\"\n    },\n    \"Education\":\n        {\n            \"Education_history\": \"From 2010 to 2019 I went to the Louise Schroeder School in Germany. After that, \"\n                                 \"starting in 2020 I started my studies at the Technical University of Munich until 2023. \"\n                                 \"From 2022 to 2022 it did an exchange abroad at the University Pompue Fabra\"\n        },\n    \"Experience\":\n        {\n            \"Experience_history\": \"asdfasdfasdfasdfasdf\"\n        },\n    \"Social Engagement\":\n        {\n            \"Social_history\": \"asdfasdfasdfasdf\"\n        },\n    \"Skills\":\n        {\n            \"Skills\": \"asdfjashdfkajsdhf\"\n        },\n    \"Interests\":\n        {\n            \"Interests\": \"asdhfakjsdhfasdf\"\n        },\n}\n\ncheck_data_questions = [\"Can you show me what I entered for X?\",\n                        \"What did you put as?\", \"Show me my X.\",\n                        \"What are my X?\"\n                        ]\ncheck_prev = [\"Last\", \"last\", \"previous\", \"Previous\"]\n\ndef print_data(stage):\n    print(\"Requested to print the stage \" + stage)\n\ncheck_data_error = \"check_data_not_found\"\n\nquestion_num = 0\nfun_num = 1\ndata_num = 2\ndebug = False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils.py b/utils.py
--- a/utils.py	(revision 6bbf81ab52715f87377532a639a7eff9ce22e93d)
+++ b/utils.py	(date 1669470446728)
@@ -60,33 +60,26 @@
     {
         "Name": ["What is your full name?", {("PERSON", ""): None}],
         "Birthdate": ["What is your date of birth?", {("DATE", "CARDINAL"): None}],
-        "E-Mail": ["Please tell me your email.", lambda t: re.search(mail_re, t).group(), None],
-        "Address": ["Please state your address.", lambda t: re.search(address_re, t).group(), None]
+        "E-Mail": ["Please tell me your email.", {("E-Mail", ""): None}],
+        "Address": ["Please state your address.", {("Address", "CARDINAL"): None}]
     },
     "Education":
         {
-            "Education_history": ["Please state your educational steps in the form of a "
-                                  "continuous text. For each educational step please enter a time frame, "
-                                  "the educational step and the name of the teaching institution",
-                                  {("DATE", "CARDINAL"): None,
-                                   ("DATE", "CARDINAL"): None,
-                                   ("ORG", ""): None}]
+            "Step 1": ["PLease state an education step containing the teaching institution, a start date "
+                       "and a end date.",
+                       {("DATE", "CARDINAL"): None}]
         },
     "Experience":
         {
-            "Experience_history": ["Please state your work experience steps in bullet points or in the form of a "
-                                   "continuous text.",
-                                   {("DATE", "CARDINAL"): None,
-                                    ("DATE", "CARDINAL"): None,
-                                    ("ORG", ""): None}]
+            "Step 1": ["Please state your work experience steps in bullet points or in the form of a "
+                       "continuous text.",
+                       {("DATE", "CARDINAL"): None}]
         },
     "Social Engagement":
         {
-            "Social_history": ["Please state your social engagements steps in bullet points or in the form of a "
+            "Step 1": ["Please state your social engagements steps in bullet points or in the form of a "
                                "continuous text.",
-                               {("DATE", "CARDINAL"): None,
-                                ("DATE", "CARDINAL"): None,
-                                ("ORG", ""): None}]
+                               {("DATE", "CARDINAL"): None}]
         },
     "Skills":
         {
@@ -104,43 +97,7 @@
                            ("ORG", ""): None}]
         },
 }
-# data = {"Personal Data":
-#     {
-#         "Name": ["What is your full name?", lambda doc: get_data(1, ["PERSON"], doc, to_string), None],
-#         "Birthdate": ["What is your date of birth?", lambda doc: get_data(1, ["DATE", "CARDINAL"], doc, to_string),
-#                       None],
-#         "E-Mail": ["Please tell me your email.", lambda t: re.search(mail_re, t).group(), None],
-#         "Address": ["Please state your address.", lambda t: re.search(address_re, t).group(), None]
-#         # TODO Train spaCY on adresses
-#     },
-#     "Education":
-#         {
-#             "Education_history": ["Please state your educational steps in the form of a "
-#                                   "continuous text. For each educational step please enter a time frame, "
-#                                   "the educational step and the name of the teaching institution",
-#                                   lambda doc: get_data(-1, ["DATE", "ORG"], doc, to_string), None]
-#         },
-#     "Experience":
-#         {
-#             "Experience_history": ["Please state your work experience steps in bullet points or in the form of a "
-#                                    "continuous text.", lambda x: x, None]
-#         },
-#     "Social Engagement":
-#         {
-#             "Social_history": ["Please state your social engagements steps in bullet points or in the form of a "
-#                                "continuous text.", lambda x: x, None]
-#         },
-#     "Skills":
-#         {
-#             "Skills": ["Please state your work experience steps in bullet points or in the form of a "
-#                        "continuous text.", lambda x: x, None]
-#         },
-#     "Interests":
-#         {
-#             "Interests": ["If you would like to state any personal interests in your CV please enter them here: ",
-#                           lambda x: x, None]
-#         },
-# }
+
 debug_data = {"Personal Data":
     {
         "Name": "Max Mustermann",
@@ -171,19 +128,8 @@
             "Interests": "asdhfakjsdhfasdf"
         },
 }
-
-check_data_questions = ["Can you show me what I entered for X?",
-                        "What did you put as?", "Show me my X.",
-                        "What are my X?"
-                        ]
-check_prev = ["Last", "last", "previous", "Previous"]
-
-def print_data(stage):
-    print("Requested to print the stage " + stage)
-
-check_data_error = "check_data_not_found"
-
 question_num = 0
+data_store = 1
 fun_num = 1
 data_num = 2
 debug = False
Index: dialog.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils import *\nimport keyboard\nimport numpy as np\nfrom numpy.linalg import norm\n\nspacy.cli.download(\"en_core_web_sm\")\nnlp = spacy.load('en_core_web_sm')\n\n\nclass Dialog:\n\n    def __init__(self):\n        self.data = data.copy()\n        self.history = []\n        self.check_data_vec = self.compute_avg_vec(check_data_questions)\n        print(\"Hello, I am CV-Bot. I am here to help you create your CV.\")\n        self.speak()\n\n    def compute_avg_vec(self, list):\n        vector = np.array([nlp(elem).vector for elem in list]).mean(axis=0)\n        return vector\n\n    def get_current_stage(self):\n        stage, _ = self.history[-1]\n        return stage\n\n    def get_previous_stage(self):\n        if len(self.history) > 1:\n            stage, _ = self.history[-1]\n            return stage\n        else:\n            return None  # Todo add error handling\n\n    def add_new_stage(self, position):\n        self.history.append((position, []))\n\n    def get_current_question(self):\n        _, questions = self.history[-1]\n        if questions:\n            return questions[-1]\n        else:\n            None  # Todo add error handling\n\n    def get_previous_question(self):\n        _, questions = self.history[-1]\n        if len(questions) > 1:\n            return questions[-2]\n        else:\n            None  # Todo add error handling\n\n    def add_question_to_history(self, question):\n        self.history[-1][1].append(question)\n\n    def handle_error(self, user_input, type):\n        if type == check_data_error:\n            print(\"Sorry unfortunately we couldn't find the data you were looking for.\")\n            new_input = input(\"Do you want to continue or try again?\")\n            if new_input.__contains__(\"again\"):\n                return self.classify(input(\"Please state your request again.\"))\n            else:\n                return None\n    # ask the question according to the current position\n    def ask(self, question):\n        # get the answer from the user or from the debug data\n        current_question = self.data[self.get_current_stage()][self.get_current_question()]\n        if debug:\n            print(current_question[question_num])\n            answer = debug_data[self.get_current_stage()][question]\n        else:\n            answer = input(current_question[question_num] + \"\\n\")\n        if debug:\n            print(answer)\n        return answer\n\n    def listen(self, input):\n        ...\n        # wait as long as keyboard is pressed\n\n    # agent starts to speak with user\n    def speak(self):\n        for position in self.data.keys():\n            # add the new stage to the history\n            self.add_new_stage(position)\n            # get the value of the dict of the current stage (eg, Name, Birthdate ...)\n            current_stage = self.data[self.get_current_stage()]\n            # go through all questions for the current stage, e.g. What is your name?\n            for question in current_stage:\n                self.add_question_to_history(question)\n                current_question = current_stage[question]\n                if question == \"E-Mail\" or question == \"Address\":\n                    processed_input = current_question[fun_num](self.ask(question))\n                else:\n                    processed_input = self.understanding(self.ask(question))\n                    self.map_input_to_data(processed_input)\n\n    def understanding(self, user_input):\n        input_type = self.classify(user_input)\n        if input_type == \"answer\":\n            return self.get_data(user_input)\n        else:\n            print_data(input_type)\n            return self.understanding(self.ask(self.get_current_question()))\n\n    # Possible returns are \"answer\" or the stage that is supposed to get printed\n    def classify(self, user_input):\n        user_input_vec = np.array(nlp(user_input).vector)\n        cosine = np.dot(user_input_vec, self.check_data_vec) / (norm(user_input_vec) * norm(self.check_data_vec))\n        if cosine > 0.3:\n            if any(e in user_input for e in check_prev):\n                return self.get_previous_stage()\n            else:\n                for key in self.data.keys():\n                    if user_input.__contains__(key):\n                        return key\n                return self.handle_error(self, user_input, check_data_error)\n        return \"answer\"\n\n    def get_data(self, input):\n        user_data = []\n        # check if we are only looking for regex and not the SpaCy model\n        current_question = self.data[self.get_current_stage()][self.get_current_question()]\n        necessary_entities = [element for innerList in current_question[fun_num].keys() for element in\n                              innerList]\n        doc = nlp(input)\n        for entity in doc.ents:\n            for type in necessary_entities:\n                if entity.label_ == type:\n                    user_data.append(entity.text)\n        print(user_data)\n        return user_data\n\n    # if \"DATE\" in types:\n    #     answer = answer.replace(\".\", \"/\")\n    #     answer = answer.replace(\",\", \"/\")\n    #\n    # doc = nlp(answer)\n    # data = []\n    # # filter all entities that are our searched type\n    # for entity in doc.ents:\n    #     for t in types:\n    #         if entity.label_ == t:\n    #             data.append(entity.text)\n    # # check if we found the correct data\n    # if 0 < numData != len(data):\n    #     data_text = \" \".join([d.text for d in data])\n    #     types_text = \", \".join([t for t in types])\n    #     doc_data_text = \" \".join([\"(\" + d.text + \", \" + d.label_ + \") \" for d in doc.ents])\n    #     raise Exception(\"get_data: Looked for \" + types_text + \" Found \" + str(\n    #         len(data)) + \"data, while expecting \" + str(\n    #         numData) + \" \\n The found data are \" + data_text + \"\\n the data in the doc is \" + doc_data_text)\n    # else:\n    #     return format_fun(data)\n\n    def map_input_to_data(self, user_data):\n        print(\"Needs to mapped\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dialog.py b/dialog.py
--- a/dialog.py	(revision 6bbf81ab52715f87377532a639a7eff9ce22e93d)
+++ b/dialog.py	(date 1669470755035)
@@ -1,7 +1,7 @@
+import spacy as spacy
+
 from utils import *
 import keyboard
-import numpy as np
-from numpy.linalg import norm
 
 spacy.cli.download("en_core_web_sm")
 nlp = spacy.load('en_core_web_sm')
@@ -10,125 +10,88 @@
 class Dialog:
 
     def __init__(self):
+        self.state = "asd"
+        self.position = "Personal Data"
         self.data = data.copy()
-        self.history = []
-        self.check_data_vec = self.compute_avg_vec(check_data_questions)
+        self.current_stage = self.data[self.position]
+        self.current_question = None
         print("Hello, I am CV-Bot. I am here to help you create your CV.")
         self.speak()
 
-    def compute_avg_vec(self, list):
-        vector = np.array([nlp(elem).vector for elem in list]).mean(axis=0)
-        return vector
-
-    def get_current_stage(self):
-        stage, _ = self.history[-1]
-        return stage
-
-    def get_previous_stage(self):
-        if len(self.history) > 1:
-            stage, _ = self.history[-1]
-            return stage
-        else:
-            return None  # Todo add error handling
-
-    def add_new_stage(self, position):
-        self.history.append((position, []))
-
-    def get_current_question(self):
-        _, questions = self.history[-1]
-        if questions:
-            return questions[-1]
-        else:
-            None  # Todo add error handling
-
-    def get_previous_question(self):
-        _, questions = self.history[-1]
-        if len(questions) > 1:
-            return questions[-2]
-        else:
-            None  # Todo add error handling
-
-    def add_question_to_history(self, question):
-        self.history[-1][1].append(question)
-
-    def handle_error(self, user_input, type):
-        if type == check_data_error:
-            print("Sorry unfortunately we couldn't find the data you were looking for.")
-            new_input = input("Do you want to continue or try again?")
-            if new_input.__contains__("again"):
-                return self.classify(input("Please state your request again."))
-            else:
-                return None
-    # ask the question according to the current position
+    # ask according to the current position
     def ask(self, question):
         # get the answer from the user or from the debug data
-        current_question = self.data[self.get_current_stage()][self.get_current_question()]
         if debug:
-            print(current_question[question_num])
-            answer = debug_data[self.get_current_stage()][question]
+            answer = debug_data[self.position][question]
         else:
-            answer = input(current_question[question_num] + "\n")
-        if debug:
-            print(answer)
+            answer = input(self.current_question[question_num] + "\n")
         return answer
 
-    def listen(self, input):
-        ...
-        # wait as long as keyboard is pressed
-
     # agent starts to speak with user
     def speak(self):
         for position in self.data.keys():
-            # add the new stage to the history
-            self.add_new_stage(position)
-            # get the value of the dict of the current stage (eg, Name, Birthdate ...)
-            current_stage = self.data[self.get_current_stage()]
+            self.position = position
+            self.current_stage = self.data[position]
             # go through all questions for the current stage, e.g. What is your name?
-            for question in current_stage:
-                self.add_question_to_history(question)
-                current_question = current_stage[question]
-                if question == "E-Mail" or question == "Address":
-                    processed_input = current_question[fun_num](self.ask(question))
-                else:
-                    processed_input = self.understanding(self.ask(question))
-                    self.map_input_to_data(processed_input)
+            for question in self.current_stage:
+                # get processed input by user
+                self.current_question = self.current_stage[question]
+                processed_input = self.understanding(self.ask(question))
+
+                # store data
+                data_dict = self.current_question[data_store]
+                data_dict[list(data_dict)[0]] = processed_input
+
+                print(data)
+
+                # education and working experience
+                self.sev_bullet_points()
 
     def understanding(self, user_input):
         input_type = self.classify(user_input)
-        if input_type == "answer":
-            return self.get_data(user_input)
-        else:
-            print_data(input_type)
-            return self.understanding(self.ask(self.get_current_question()))
+        return self.get_data(input_type, user_input)
 
-    # Possible returns are "answer" or the stage that is supposed to get printed
     def classify(self, user_input):
-        user_input_vec = np.array(nlp(user_input).vector)
-        cosine = np.dot(user_input_vec, self.check_data_vec) / (norm(user_input_vec) * norm(self.check_data_vec))
-        if cosine > 0.3:
-            if any(e in user_input for e in check_prev):
-                return self.get_previous_stage()
-            else:
-                for key in self.data.keys():
-                    if user_input.__contains__(key):
-                        return key
-                return self.handle_error(self, user_input, check_data_error)
+        # Todo Use a model to decide
         return "answer"
 
-    def get_data(self, input):
+    def get_data(self, input_type, input):
         user_data = []
-        # check if we are only looking for regex and not the SpaCy model
-        current_question = self.data[self.get_current_stage()][self.get_current_question()]
-        necessary_entities = [element for innerList in current_question[fun_num].keys() for element in
-                              innerList]
-        doc = nlp(input)
-        for entity in doc.ents:
-            for type in necessary_entities:
-                if entity.label_ == type:
-                    user_data.append(entity.text)
-        print(user_data)
+        if input_type == 'answer':
+            # check if we are only looking for regex and not the SpaCy model
+            necessary_entities = [element for innerList in self.current_question[fun_num].keys() for element in innerList]
+            doc = nlp(input)
+            for entity in doc.ents:
+                for type in necessary_entities:
+                    if entity.label_ == type:
+                        user_data.append(entity.text)
         return user_data
 
+    def map_input_to_data(self, user_data):
+        print("Needs to mapped")
+
+    def sev_bullet_points(self):
+        counter = 0
+        if self.position == 'Education' or self.position == 'Experience':
+            while True:
+                inp = input('If you would like to add another ' + str(self.position) + 'step enter the '
+                                                                                       'information in '
+                                                                                       'the same format '
+                                                                                       'as already done. '
+                                                                                       'Otherwise press '
+                                                                                       'Enter' + "\n")
+
+                if inp == "":
+                    break;
+                else:
+                    # process the given input
+                    processed_input = self.understanding(inp)
+
+                    # create new dictionary element
+                    print(self.current_stage)
+                    self.current_stage[('Step' + str(counter + 2))] = [None,
+                                                                       {("DATE", "DATE", "CARDINAL"): processed_input}]
+                print(data)
     # if "DATE" in types:
     #     answer = answer.replace(".", "/")
     #     answer = answer.replace(",", "/")
@@ -149,7 +112,4 @@
     #         len(data)) + "data, while expecting " + str(
     #         numData) + " \n The found data are " + data_text + "\n the data in the doc is " + doc_data_text)
     # else:
-    #     return format_fun(data)
-
-    def map_input_to_data(self, user_data):
-        print("Needs to mapped")
+    #     return format_fun(data)
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"add readme.md\">\n      <change beforePath=\"$PROJECT_DIR$/dialog.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dialog.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/utils.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/utils.py\" afterDir=\"false\" />\n    </list>\n    <list id=\"d940c511-92f0-4fb1-bee5-601ff7e2efda\" name=\"Changes by danielbier\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Jupyter Notebook\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2GaQfpjOf9rEUTWkdg4KFLWfbUW\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/kraus/OneDrive/Uni/Semester 5 - Barcelona/Term 1/AI/P-03/reinforcement&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CV-Bot\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CV-Bot\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"\" />\n      <created>1666624320371</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1666624320371</updated>\n      <workItem from=\"1666624324547\" duration=\"3914000\" />\n      <workItem from=\"1666707462917\" duration=\"24000\" />\n      <workItem from=\"1667220446521\" duration=\"2463000\" />\n      <workItem from=\"1668082266353\" duration=\"57000\" />\n      <workItem from=\"1668349949463\" duration=\"9077000\" />\n      <workItem from=\"1668771685506\" duration=\"47000\" />\n      <workItem from=\"1669282439560\" duration=\"10646000\" />\n      <workItem from=\"1669300612743\" duration=\"27000\" />\n      <workItem from=\"1669389294498\" duration=\"687000\" />\n      <workItem from=\"1669464900000\" duration=\"5396000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"add readme.md\">\n      <created>1667490598481</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1667490598481</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"add readme.md\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add readme.md\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/main.py</url>\n          <line>6</line>\n          <option name=\"timeStamp\" value=\"5\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/dialog.py</url>\n          <line>105</line>\n          <option name=\"timeStamp\" value=\"15\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/CV_Bot$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1669469507450\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6bbf81ab52715f87377532a639a7eff9ce22e93d)
+++ b/.idea/workspace.xml	(date 1669470758421)
@@ -152,13 +152,13 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/dialog.py</url>
-          <line>105</line>
+          <line>54</line>
           <option name="timeStamp" value="15" />
         </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669469507450" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669470214203" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
