Index: dialog.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils import *\r\nimport keyboard\r\nimport numpy as np\r\nfrom numpy.linalg import norm\r\nimport Levenshtein\r\n\r\nspacy.cli.download(\"en_core_web_sm\")\r\nnlp = spacy.load('en_core_web_sm')\r\n\r\n\r\nclass Dialog:\r\n\r\n    def __init__(self):\r\n        self.data = data.copy()\r\n        self.history = []\r\n        self.check_data_vec = self.compute_avg_vec(check_data_questions)\r\n        print(\"Hello, I am CV-Bot. I am here to help you create your CV.\")\r\n        self.speak()\r\n\r\n    def compute_avg_vec(self, list):\r\n        vector = np.array([nlp(elem).vector for elem in list]).mean(axis=0)\r\n        return vector\r\n\r\n    def get_current_stage_name(self):\r\n        stage, _ = self.history[-1]\r\n        return stage\r\n\r\n    def get_current_stage_data(self):\r\n        return data[self.get_current_stage_name()]\r\n\r\n    def get_previous_stage(self):\r\n        if len(self.history) > 1:\r\n            stage, _ = self.history[-1]\r\n            return stage\r\n        else:\r\n            return self.handle_error(\"\", no_prev_error)\r\n\r\n    def add_new_stage(self, position):\r\n        self.history.append((position, []))\r\n\r\n    def get_current_question_name(self):\r\n        _, questions = self.history[-1]\r\n        return questions[-1]\r\n\r\n    def get_current_question_data(self):\r\n        return data[self.get_current_stage_name()][self.get_current_question_name()]\r\n\r\n    def get_previous_question_name(self):\r\n        _, questions = self.history[-1]\r\n        if len(questions) > 1:\r\n            return questions[-2]\r\n        else:\r\n            return self.handle_error(\"\", no_prev_error)\r\n\r\n    def add_question_to_history(self, question):\r\n        self.history[-1][1].append(question)\r\n\r\n    def print_data(self, elem):\r\n        if elem is None:\r\n            return\r\n        text = \"\"\r\n        show = False\r\n        for stage in self.data.keys():\r\n\r\n            stage_text = \"\"\r\n            if stage.__contains__(elem):\r\n                stage_text += stage + \":\\n\"\r\n\r\n            for sub_stage in self.data[stage]:\r\n                if stage.__contains__(elem) or sub_stage.__contains__(elem):\r\n                    sub_stage_text = sub_stage + \":\"\r\n                    for data in list(self.data[stage][sub_stage][1].values()):\r\n                        if data:\r\n                            sub_stage_text += \" \" + str(data)\r\n                    if sub_stage_text != sub_stage + \":\":\r\n                        stage_text += sub_stage_text + \"\\n\"\r\n            if stage_text and stage_text != stage + \":\\n\":\r\n                text += stage_text\r\n        if text != \"\":\r\n            print(text, end=\"\")\r\n        else:\r\n            print(\"I didn't found any data to show you\")\r\n\r\n    def handle_error(self, user_input, type):\r\n        if type == check_data_error:\r\n            print(\"Sorry unfortunately we couldn't find the data you were looking for.\")\r\n            new_input = input(\"Do you want to continue or try again? \\n\")\r\n            if any(ele in new_input for ele in [\"again\", \"Again\"]):\r\n                return self.classify(input(\"Please state your request again. \\n\"))\r\n            else:\r\n                return None\r\n        elif type == no_prev_error:\r\n            raise Exception(\"Tried to look at previous data, without any existing\")\r\n\r\n    # ask according to the current position\r\n    def ask(self, question):\r\n        # get the answer from the user or from the debug data\r\n        current_question = self.get_current_question_data()\r\n        if debug:\r\n            print(current_question[question_num])\r\n            answer = debug_data[self.get_current_stage()][question]\r\n        else:\r\n            answer = input(current_question[question_num] + \"\\n\")\r\n        if debug:\r\n            print(answer)\r\n        return answer\r\n\r\n    # agent starts to speak with user\r\n    def speak(self):\r\n        for position in self.data.keys():\r\n            # add the new stage to the history\r\n            self.add_new_stage(position)\r\n            print(\"Now we are going to go to your \" + position)\r\n            # get the value of the dict of the current stage (eg, Name, Birthdate ...)\r\n            current_stage = self.get_current_stage_data()\r\n            # go through all questions for the current stage, e.g. What is your name?\r\n            for question in list(current_stage):\r\n                # get processed input by user\r\n                self.add_question_to_history(question)\r\n                processed_input = self.understanding(self.ask(question))\r\n\r\n                if debug:\r\n                    print('processed input')\r\n                    print(processed_input)\r\n\r\n                # store data\r\n                current_question = self.get_current_question_data()\r\n                data_dict = current_question[data_store]\r\n\r\n                for key, value in data_dict.items():\r\n                    for inp in list(processed_input):\r\n                        if inp[0] in key:\r\n                            data_dict[key] = inp[1]\r\n                            processed_input.remove(inp)\r\n                            break;\r\n\r\n                if debug:\r\n                    self.print_data(\"\")\r\n\r\n                # education and working experience\r\n                self.sev_bullet_points()\r\n\r\n    def understanding(self, user_input):\r\n        input_type = self.classify(user_input)\r\n        if not input_type or input_type != \"answer\":\r\n            self.print_data(input_type)\r\n            return self.understanding(self.ask(self.get_current_question_name()))\r\n        elif input_type == \"answer\":\r\n            return self.get_data(user_input)\r\n\r\n    # Possible returns are \"answer\" or the stage that is supposed to get printed\r\n    def classify(self, user_input):\r\n        if self.similar(user_input, check_data_questions, 0.4):\r\n            if any(e in user_input for e in check_prev):\r\n                return self.get_previous_stage()\r\n            else:\r\n                return self.get_most_similar(user_input, data_keys)\r\n                # for key in self.data.keys():\r\n                #     if self.similar(key, user_input, 0.25):\r\n                #         return key\r\n                #     for q in self.data[key].keys():\r\n                #         if self.similar(q, user_input, 0.25):\r\n                #             return q\r\n\r\n        return \"answer\"\r\n\r\n    def get_most_similar(self, input, compare):\r\n        d = {}\r\n        for elem in compare:\r\n            d[elem] = Levenshtein.distance(input, elem) #self.similarity(input, elem)\r\n        max_val = max(d.values())\r\n        for key, value in d.items():\r\n            if max_val == value:\r\n                return key\r\n        return self.handle_error(input, check_data_error)\r\n    def similarity(self, elem, ls):\r\n        elem_vec = np.array(nlp(elem).vector)\r\n        if type(ls) == type([]):\r\n            ls_vec = self.compute_avg_vec(ls)\r\n        else:\r\n            ls_vec = np.array(nlp(ls).vector)\r\n        cosine = np.dot(elem_vec, ls_vec) / (norm(elem_vec) * norm(ls_vec))\r\n        return cosine\r\n    def similar(self, elem, ls, threshold):\r\n        return self.similarity(elem, ls) > threshold\r\n\r\n\r\n    def get_data(self, input): # TODO add regex for address and email\r\n        user_data = []\r\n        if self.get_current_question_name() == \"Adress\":\r\n            return [(\"Adress\", re.search(address_re, input).group())]\r\n        elif self.get_current_question_name() == \"E-Mail\":\r\n            return [(\"E-Mail\", re.search(mail_re, input).group())]\r\n\r\n        # check if we are only looking for regex and not the SpaCy model\r\n        current_question = self.get_current_question_data()\r\n        necessary_entities = [element for innerList in current_question[fun_num].keys() for element in\r\n                              innerList]\r\n        doc = nlp(input)\r\n        for entity in doc.ents:\r\n            for type in necessary_entities:\r\n                if entity.label_ == type:\r\n                    user_data.append(tuple((type, entity.text)))\r\n\r\n        # when filtering dates remove possibly created duplicates\r\n        user_data = list(set([i for i in user_data]))\r\n        return user_data\r\n\r\n    def sev_bullet_points(self):\r\n        counter = 0\r\n        position = self.get_current_stage_name()\r\n        if position == 'Education' or position == 'Experience':\r\n            while True:\r\n                inp = input('If you would like to add another ' + str(position) + 'step enter the '\r\n                                                                                  'information in '\r\n                                                                                  'the same format '\r\n                                                                                  'as already done. '\r\n                                                                                  'Otherwise press '\r\n                                                                                  'Enter' + \"\\n\")\r\n\r\n                if inp == \"\":\r\n                    break;\r\n                else:\r\n                    # process the given input\r\n                    processed_input = self.understanding(inp)\r\n\r\n                    # create new dictionary element\r\n\r\n                    stage = self.get_current_stage_data()\r\n                    stage[('Step' + str(counter + 2))] = [None,\r\n                                                          {(\"DATE\", \"CARDINAL\", '1'): None,\r\n                                                           (\"DATE\", \"CARDINAL\", '2'): None,\r\n                                                           (\"ORG\", \"\"): None}]\r\n                    self.add_question_to_history(('Step' + str(counter + 2)))\r\n                    current_question = self.get_current_question_data()\r\n                    data_dict = current_question[data_store]\r\n\r\n                    if debug:\r\n                        print(self.get_current_stage_data())\r\n                        print(self.get_current_question_name())\r\n                        print(data_dict)\r\n                        print(current_question)\r\n\r\n                    for key, value in data_dict.items():\r\n                        for inp in list(processed_input):\r\n                            if inp[0] in key:\r\n                                data_dict[key] = inp[1]\r\n                                processed_input.remove(inp)\r\n                                break;\r\n                if debug:\r\n                    print(data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dialog.py b/dialog.py
--- a/dialog.py	(revision ccf95ec80417a1b7f8b8a0c4b0defe5ff4271790)
+++ b/dialog.py	(date 1669645286613)
@@ -1,11 +1,10 @@
 from utils import *
-import keyboard
 import numpy as np
 from numpy.linalg import norm
-import Levenshtein
+#import Levenshtein
 
-spacy.cli.download("en_core_web_sm")
-nlp = spacy.load('en_core_web_sm')
+
+#from replit import clear
 
 
 class Dialog:
@@ -14,6 +13,7 @@
         self.data = data.copy()
         self.history = []
         self.check_data_vec = self.compute_avg_vec(check_data_questions)
+        #clear()
         print("Hello, I am CV-Bot. I am here to help you create your CV.")
         self.speak()
 
@@ -85,12 +85,13 @@
         if type == check_data_error:
             print("Sorry unfortunately we couldn't find the data you were looking for.")
             new_input = input("Do you want to continue or try again? \n")
-            if any(ele in new_input for ele in ["again", "Again"]):
+            if self.check_input_for_words(new_input, check_again):
                 return self.classify(input("Please state your request again. \n"))
             else:
                 return None
         elif type == no_prev_error:
-            raise Exception("Tried to look at previous data, without any existing")
+            print("Sorry i didn't find any previous data.")
+            return self.ask(self.get_current_question_name())
 
     # ask according to the current position
     def ask(self, question):
@@ -98,7 +99,7 @@
         current_question = self.get_current_question_data()
         if debug:
             print(current_question[question_num])
-            answer = debug_data[self.get_current_stage()][question]
+            answer = debug_data[self.get_current_stage_name()][question]
         else:
             answer = input(current_question[question_num] + "\n")
         if debug:
@@ -132,7 +133,7 @@
                         if inp[0] in key:
                             data_dict[key] = inp[1]
                             processed_input.remove(inp)
-                            break;
+                            break
 
                 if debug:
                     self.print_data("")
@@ -151,28 +152,35 @@
     # Possible returns are "answer" or the stage that is supposed to get printed
     def classify(self, user_input):
         if self.similar(user_input, check_data_questions, 0.4):
-            if any(e in user_input for e in check_prev):
-                return self.get_previous_stage()
+            if self.check_input_for_words(user_input, check_prev):
+                if self.check_input_for_words(user_input, check_stage):
+                    return self.get_previous_stage()
+                else:
+                    return self.get_previous_question_name()
             else:
-                return self.get_most_similar(user_input, data_keys)
-                # for key in self.data.keys():
-                #     if self.similar(key, user_input, 0.25):
-                #         return key
-                #     for q in self.data[key].keys():
-                #         if self.similar(q, user_input, 0.25):
-                #             return q
-
-        return "answer"
-
-    def get_most_similar(self, input, compare):
-        d = {}
-        for elem in compare:
-            d[elem] = Levenshtein.distance(input, elem) #self.similarity(input, elem)
-        max_val = max(d.values())
-        for key, value in d.items():
-            if max_val == value:
-                return key
-        return self.handle_error(input, check_data_error)
+                # return self.get_most_similar(user_input, data_keys)
+                for key in self.data.keys():
+                    if self.check_input_for_words(user_input, data_keys[key]):
+                        return key
+                    for q in self.data[key].keys():
+                        if self.check_input_for_words(user_input, data_keys[q]):
+                            return q
+        else:
+            return "answer"
+
+    def check_input_for_words(self, user_input, words):
+        return any(str.lower(ele) in str.lower(user_input) for ele in words)
+
+    # def get_most_similar(self, input, compare):
+    #     d = {}
+    #     for elem in compare:
+    #         d[elem] = Levenshtein.distance(input, elem)  # self.similarity(input, elem)
+    #     max_val = max(d.values())
+    #     for key, value in d.items():
+    #         if max_val == value:
+    #             return key
+    #     return self.handle_error(input, check_data_error)
+
     def similarity(self, elem, ls):
         elem_vec = np.array(nlp(elem).vector)
         if type(ls) == type([]):
@@ -181,16 +189,22 @@
             ls_vec = np.array(nlp(ls).vector)
         cosine = np.dot(elem_vec, ls_vec) / (norm(elem_vec) * norm(ls_vec))
         return cosine
+
     def similar(self, elem, ls, threshold):
         return self.similarity(elem, ls) > threshold
 
-
-    def get_data(self, input): # TODO add regex for address and email
+    def get_data(self, input):
         user_data = []
         if self.get_current_question_name() == "Adress":
-            return [("Adress", re.search(address_re, input).group())]
+            try:
+                return [("Adress", re.search(address_re, input).group())]
+            except AttributeError:
+                return None
         elif self.get_current_question_name() == "E-Mail":
-            return [("E-Mail", re.search(mail_re, input).group())]
+            try:
+                return [("E-Mail", re.search(mail_re, input).group())]
+            except AttributeError:
+                return None
 
         # check if we are only looking for regex and not the SpaCy model
         current_question = self.get_current_question_data()
@@ -246,6 +260,6 @@
                             if inp[0] in key:
                                 data_dict[key] = inp[1]
                                 processed_input.remove(inp)
-                                break;
+                                break
                 if debug:
                     print(data)
Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\nimport spacy\r\n\r\n\r\n# currently loading spacy during every execution\r\n\r\n\r\n# checks if the given input of the user actually contains the necessary information\r\n\r\n\r\ndef format_data(data, all_data, types):\r\n    formated_data = []\r\n    if len(data) % len(types) != 0:\r\n        all_data_text = \" \".join([d.text for d in all_data])\r\n        data_text = \" \".join([d.text for d in data])\r\n        types_text = \", \".join([t for t in types])\r\n        raise Exception(\"format_data: Looked for \" + types_text + \" Found \" + str(\r\n            len(data)) + \" data, which isn't possible to put into \" + len(\r\n            types) + \" fields.\" + \"\\n data: \" + data_text + \"\\n all data: \" + all_data_text)\r\n\r\n    for i in range(len(data) % len(types)):\r\n        current_data_set = data[(i * len(types)):((i + 1) * len(types))]\r\n\r\n        formated_data.append(data[(i * len(types)):((i + 1) * len(types))])\r\n\r\n\r\n# filter for valid inputs by user\r\nname_re = \"([A-Z]|[a-z])[a-z]+ ([A-Z]|[a-z])[a-z]+( ([A-Z]|[a-z])[a-z]+)*\"\r\ndate_re = \"([0-3]?[0-9].[0-1]?[0-9].[1-2][0-9][0-9][0-9])|([0-3]?[0-9]/[0-1]?[0-9]/[1-2][0-9][0-9][0-9])\"\r\nmail_re = \".+@.+\\..+\"\r\naddress_re = \"[A-Z][a-z]*? [0-9]*\"\r\neduc_re = None\r\nexper_re = None\r\nsocial_re = None\r\nskills_re = None\r\ninterests_re = None\r\n\r\n\r\ndef to_string(t):\r\n    return \" \".join(t)\r\n\r\n\r\ndef print_cv(user_data):\r\n    indent = \"   \"\r\n    cv = \"C I R R I C U L U M   V I T A E\\n\"\r\n    for stage in data.keys():\r\n        contains_data = False\r\n        stage_text = stage + \":\\n\"\r\n        for sub_headline in user_data[stage].keys():\r\n            if user_data[stage][sub_headline][data_num] != None:\r\n                contains_data = True\r\n                stage_text += indent + sub_headline + \":\\n\"\r\n                stage_text += indent + indent + user_data[stage][sub_headline][data_num] + \"\\n\"\r\n        if contains_data:\r\n            cv += stage_text + \"\\n\"\r\n    print(cv)\r\n\r\n\r\ndata = {\"Personal Data\":\r\n    {\r\n        \"Name\": [\"What is your full name?\", {(\"PERSON\", \"\"): None}],\r\n        \"Birthdate\": [\"What is your date of birth?\", {(\"DATE\", \"CARDINAL\"): None}],\r\n        \"E-Mail\": [\"Please tell me your email.\", {(\"E-Mail\", \"\"): None}],\r\n        \"Address\": [\"Please state your address.\", {(\"Address\", \"CARDINAL\"): None}]\r\n    },\r\n    \"Education\":\r\n        {\r\n            \"Step 1\": [\"Please state an education step containing the teaching institution, a start date \"\r\n                       \"and a end date.\",\r\n                       {(\"DATE\", \"CARDINAL\", '1'): None,\r\n                        (\"DATE\", \"CARDINAL\", '2'): None,\r\n                        (\"ORG\", \"\"): None}]\r\n        },\r\n    \"Experience\":\r\n        {\r\n            \"Step 1\": [\"Please state an step of your working experience containing the company, a start date \"\r\n                       \"and a end date.\",\r\n                       {(\"DATE\", \"CARDINAL\", '1'): None,\r\n                        (\"DATE\", \"CARDINAL\", '2'): None,\r\n                        (\"ORG\", \"\"): None}]\r\n        },\r\n    \"Social Engagement\":\r\n        {\r\n            \"Step 1\": [\"Please state a social engagement step containing the the institution, a start date \"\r\n                       \"and a end date.\",\r\n                       {(\"DATE\", \"CARDINAL\", '1'): None,\r\n                        (\"DATE\", \"CARDINAL\", '2'): None,\r\n                        (\"ORG\", \"\"): None}]\r\n        },\r\n    \"Skills\":\r\n        {\r\n            \"Skills\": [\"Please state your work experience steps in bullet points or in the form of a \"\r\n                       \"continuous text.\",\r\n                       {(\"DATE\", \"CARDINAL\"): None,\r\n                        (\"DATE\", \"CARDINAL\"): None,\r\n                        (\"ORG\", \"\"): None}]\r\n        },\r\n    \"Interests\":\r\n        {\r\n            \"Interests\": [\"If you would like to state any personal interests in your CV please enter them here: \",\r\n                          {(\"DATE\", \"CARDINAL\"): None,\r\n                           (\"DATE\", \"CARDINAL\"): None,\r\n                           (\"ORG\", \"\"): None}]\r\n        }\r\n}\r\ndebug_data = {\"Personal Data\":\r\n    {\r\n        \"Name\": \"Max Mustermann\",\r\n        \"Birthdate\": \"20.12.2017\",\r\n        \"E-Mail\": \"abc@gmail.com\",\r\n        \"Address\": \"Bauerstr. 4\"\r\n    },\r\n    \"Education\":\r\n        {\r\n            \"Education_history\": \"From 2010 to 2019 I went to the Louise Schroeder School in Germany. After that, \"\r\n                                 \"starting in 2020 I started my studies at the Technical University of Munich until 2023. \"\r\n                                 \"From 2022 to 2022 it did an exchange abroad at the University Pompue Fabra\"\r\n        },\r\n    \"Experience\":\r\n        {\r\n            \"Experience_history\": \"asdfasdfasdfasdfasdf\"\r\n        },\r\n    \"Social Engagement\":\r\n        {\r\n            \"Social_history\": \"asdfasdfasdfasdf\"\r\n        },\r\n    \"Skills\":\r\n        {\r\n            \"Skills\": \"asdfjashdfkajsdhf\"\r\n        },\r\n    \"Interests\":\r\n        {\r\n            \"Interests\": \"asdhfakjsdhfasdf\"\r\n        },\r\n}\r\n\r\ncheck_data_questions = [\"Can you show me what I entered for X?\",\r\n                        \"What did you put as?\", \"Show me my X.\",\r\n                        \"What are my X?\"\r\n                        ]\r\ncheck_prev = [\"Last\", \"last\", \"previous\", \"Previous\"]\r\n\r\n\r\n\r\n# Error codes\r\ncheck_data_error = \"check_data_not_found\"\r\nno_prev_error = \"prev\"\r\ndata_keys = [\"Personal Data\", \"Name\", \"Birthdate\", \"E-Mail\", \"Adress\", \"Education\", \"Skills\", \"Social Engagement\", \"Experience\", \"Interests\"]\r\n\r\nquestion_num = 0\r\nfun_num = 1\r\ndata_num = 2\r\ndebug = False\r\ndata_store = 1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils.py b/utils.py
--- a/utils.py	(revision ccf95ec80417a1b7f8b8a0c4b0defe5ff4271790)
+++ b/utils.py	(date 1669645345673)
@@ -1,5 +1,8 @@
-import re
 import spacy
+import re
+
+spacy.cli.download("en_core_web_sm")
+nlp = spacy.load('en_core_web_sm')
 
 
 # currently loading spacy during every execution
@@ -136,16 +139,30 @@
 
 check_data_questions = ["Can you show me what I entered for X?",
                         "What did you put as?", "Show me my X.",
-                        "What are my X?"
+                        "What are my X?",
+                        "Tell me about the previous Information."
+                        "Show me the last questions input."
+                        "What was saved in the X"
                         ]
 check_prev = ["Last", "last", "previous", "Previous"]
-
-
+check_stage = ["stage", "phase", "section"]
+check_again = ["again", "more"]
+data_keys = {
+    "Personal Data": ["Personal", "Personal", "About me"],
+    "Name": ["Name"],
+    "Birthdate": ["Date"],
+    "E-Mail": ["Mail"],
+    "Address": ["Adress"],
+    "Education": ["Education", "School", "University"],
+    "Skills": ["Skill", "Action"],
+    "Social Engagement": ["Social", "Engagement"],
+    "Experience": ["Experience"],
+    "Interests": ["Interests"]
+}
 
 # Error codes
 check_data_error = "check_data_not_found"
 no_prev_error = "prev"
-data_keys = ["Personal Data", "Name", "Birthdate", "E-Mail", "Adress", "Education", "Skills", "Social Engagement", "Experience", "Interests"]
 
 question_num = 0
 fun_num = 1
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"add printing etc\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/CV-Bot.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/CV-Bot.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_11_22__10_38__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_11_22__10_38__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/dialog.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dialog.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/utils.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/utils.py\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"d940c511-92f0-4fb1-bee5-601ff7e2efda\" name=\"Changes by danielbier\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Jupyter Notebook\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2GaQfpjOf9rEUTWkdg4KFLWfbUW\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/kraus/OneDrive/Uni/Semester 5 - Barcelona/Term 1/AI/P-03/reinforcement&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"CV-Bot\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"CV-Bot\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"\" />\r\n      <created>1666624320371</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1666624320371</updated>\r\n      <workItem from=\"1666624324547\" duration=\"3914000\" />\r\n      <workItem from=\"1666707462917\" duration=\"24000\" />\r\n      <workItem from=\"1667220446521\" duration=\"2463000\" />\r\n      <workItem from=\"1668082266353\" duration=\"57000\" />\r\n      <workItem from=\"1668349949463\" duration=\"9077000\" />\r\n      <workItem from=\"1668771685506\" duration=\"47000\" />\r\n      <workItem from=\"1669282439560\" duration=\"10646000\" />\r\n      <workItem from=\"1669300612743\" duration=\"27000\" />\r\n      <workItem from=\"1669389294498\" duration=\"687000\" />\r\n      <workItem from=\"1669464900000\" duration=\"7630000\" />\r\n      <workItem from=\"1669628196853\" duration=\"6406000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"add readme.md\">\r\n      <created>1667490598481</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1667490598481</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"add readme.md\">\r\n      <created>1669470813553</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669470813553</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"add readme.md\">\r\n      <created>1669470895329</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669470895329</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"add printing etc\">\r\n      <created>1669478066049</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669478066049</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"add readme.md\" />\r\n    <MESSAGE value=\"add printing etc\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add printing etc\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/main.py</url>\r\n          <line>6</line>\r\n          <option name=\"timeStamp\" value=\"5\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/dialog.py</url>\r\n          <line>163</line>\r\n          <option name=\"timeStamp\" value=\"22\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/dialog.py</url>\r\n          <line>157</line>\r\n          <option name=\"timeStamp\" value=\"23\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/dialog.py</url>\r\n          <line>143</line>\r\n          <option name=\"timeStamp\" value=\"24\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/dialog.py</url>\r\n          <line>167</line>\r\n          <option name=\"timeStamp\" value=\"25\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/CV_Bot$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1669634542259\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ccf95ec80417a1b7f8b8a0c4b0defe5ff4271790)
+++ b/.idea/workspace.xml	(date 1669645474130)
@@ -4,10 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5649b55e-c08f-47c7-b4e3-720abb9a88ae" name="Changes" comment="add printing etc">
-      <change beforePath="$PROJECT_DIR$/.idea/CV-Bot.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/CV-Bot.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_11_22__10_38__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_11_22__10_38__Changes_.xml" afterDir="false" />
+    <list default="true" id="5649b55e-c08f-47c7-b4e3-720abb9a88ae" name="Changes" comment="Some stuff">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/dialog.py" beforeDir="false" afterPath="$PROJECT_DIR$/dialog.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/utils.py" beforeDir="false" afterPath="$PROJECT_DIR$/utils.py" afterDir="false" />
@@ -117,6 +114,7 @@
       <workItem from="1669389294498" duration="687000" />
       <workItem from="1669464900000" duration="7630000" />
       <workItem from="1669628196853" duration="6406000" />
+      <workItem from="1669642502685" duration="2946000" />
     </task>
     <task id="LOCAL-00001" summary="add readme.md">
       <created>1667490598481</created>
@@ -146,7 +144,14 @@
       <option name="project" value="LOCAL" />
       <updated>1669478066049</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="Some stuff">
+      <created>1669642596178</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1669642596178</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -167,7 +172,8 @@
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="add readme.md" />
     <MESSAGE value="add printing etc" />
-    <option name="LAST_COMMIT_MESSAGE" value="add printing etc" />
+    <MESSAGE value="Some stuff" />
+    <option name="LAST_COMMIT_MESSAGE" value="Some stuff" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
@@ -179,28 +185,28 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/dialog.py</url>
-          <line>163</line>
+          <line>166</line>
           <option name="timeStamp" value="22" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/dialog.py</url>
-          <line>157</line>
+          <line>161</line>
           <option name="timeStamp" value="23" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/dialog.py</url>
-          <line>143</line>
+          <line>144</line>
           <option name="timeStamp" value="24" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/dialog.py</url>
-          <line>167</line>
+          <line>174</line>
           <option name="timeStamp" value="25" />
         </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669634542259" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669645286666" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
