Index: dialog.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils import *\nimport keyboard\nimport numpy as np\nfrom numpy.linalg import norm\nimport Levenshtein\n\nspacy.cli.download(\"en_core_web_sm\")\nnlp = spacy.load('en_core_web_sm')\n\n\nclass Dialog:\n\n    def __init__(self):\n        self.data = data.copy()\n        self.history = []\n        self.check_data_vec = self.compute_avg_vec(check_data_questions)\n        print(\"Hello, I am CV-Bot. I am here to help you create your CV.\")\n        self.speak()\n\n    def compute_avg_vec(self, list):\n        vector = np.array([nlp(elem).vector for elem in list]).mean(axis=0)\n        return vector\n\n    def get_current_stage_name(self):\n        stage, _ = self.history[-1]\n        return stage\n\n    def get_current_stage_data(self):\n        return data[self.get_current_stage_name()]\n\n    def get_previous_stage(self):\n        if len(self.history) > 1:\n            stage, _ = self.history[-1]\n            return stage\n        else:\n            return self.handle_error(\"\", no_prev_error)\n\n    def add_new_stage(self, position):\n        self.history.append((position, []))\n\n    def get_current_question_name(self):\n        _, questions = self.history[-1]\n        return questions[-1]\n\n    def get_current_question_data(self):\n        return data[self.get_current_stage_name()][self.get_current_question_name()]\n\n    def get_previous_question_name(self):\n        _, questions = self.history[-1]\n        if len(questions) > 1:\n            return questions[-2]\n        else:\n            return self.handle_error(\"\", no_prev_error)\n\n    def add_question_to_history(self, question):\n        self.history[-1][1].append(question)\n\n    def print_data(self, elem):\n        if elem is None:\n            return\n        text = \"\"\n        show = False\n        for stage in self.data.keys():\n\n            stage_text = \"\"\n            if stage.__contains__(elem):\n                stage_text += stage + \":\\n\"\n\n            for sub_stage in self.data[stage]:\n                if stage.__contains__(elem) or sub_stage.__contains__(elem):\n                    sub_stage_text = sub_stage + \":\"\n                    for data in list(self.data[stage][sub_stage][1].values()):\n                        if data:\n                            sub_stage_text += \" \" + str(data)\n                    if sub_stage_text != sub_stage + \":\":\n                        stage_text += sub_stage_text + \"\\n\"\n            if stage_text and stage_text != stage + \":\\n\":\n                text += stage_text\n        if text != \"\":\n            print(text, end=\"\")\n        else:\n            print(\"I didn't found any data to show you\")\n\n    def handle_error(self, user_input, type):\n        if type == check_data_error:\n            print(\"Sorry unfortunately we couldn't find the data you were looking for.\")\n            new_input = input(\"Do you want to continue or try again? \\n\")\n            if any(ele in new_input for ele in [\"again\", \"Again\"]):\n                return self.classify(input(\"Please state your request again. \\n\"))\n            else:\n                return None\n        elif type == no_prev_error:\n            raise Exception(\"Tried to look at previous data, without any existing\")\n\n    # ask according to the current position\n    def ask(self, question, data_missing):\n        # get the answer from the user or from the debug data\n        current_question = self.get_current_question_data()\n        if debug:\n            print(current_question[question_num])\n            answer = debug_data[self.get_current_stage()][question]\n        else:\n            if data_missing != None:\n                answer = input(str(data_missing) + ' - question: - ' + current_question[question_num] + \"\\n\")\n            else:\n                answer = input(current_question[question_num] + \"\\n\")\n        if debug:\n            print(answer)\n        return answer\n\n    # agent starts to speak with user\n    def speak(self):\n        for position in self.data.keys():\n            # add the new stage to the history\n            self.add_new_stage(position)\n            print(\"Now we are going to go to your \" + position)\n            # get the value of the dict of the current stage (eg, Name, Birthdate ...)\n            current_stage = self.get_current_stage_data()\n            # go through all questions for the current stage, e.g. What is your name?\n            for question in list(current_stage):\n                # get processed input by user\n                self.add_question_to_history(question)\n                processed_input = self.understanding(self.ask(question, None))\n\n                if debug:\n                    print('processed input')\n                    print(processed_input)\n\n                # store data\n                current_question = self.get_current_question_data()\n                data_dict = current_question[data_store]\n\n                self.map_data(data_dict, processed_input, question)\n\n                if debug:\n                    self.print_data(\"\")\n\n                # education and working experience\n                self.sev_bullet_points(question)\n\n    def understanding(self, user_input):\n        input_type = self.classify(user_input)\n        if not input_type or input_type != \"answer\":\n            self.print_data(input_type)\n            return self.understanding(self.ask(self.get_current_question_name(), None))\n        elif input_type == \"answer\":\n            return self.get_data(user_input)\n\n    # Possible returns are \"answer\" or the stage that is supposed to get printed\n    def classify(self, user_input):\n        if self.similar(user_input, check_data_questions, 0.4):\n            if any(e in user_input for e in check_prev):\n                return self.get_previous_stage()\n            else:\n                return self.get_most_similar(user_input, data_keys)\n                # for key in self.data.keys():\n                #     if self.similar(key, user_input, 0.25):\n                #         return key\n                #     for q in self.data[key].keys():\n                #         if self.similar(q, user_input, 0.25):\n                #             return q\n\n        return \"answer\"\n\n    def get_most_similar(self, input, compare):\n        d = {}\n        for elem in compare:\n            d[elem] = Levenshtein.distance(input, elem) #self.similarity(input, elem)\n        max_val = max(d.values())\n        for key, value in d.items():\n            if max_val == value:\n                return key\n        return self.handle_error(input, check_data_error)\n    def similarity(self, elem, ls):\n        elem_vec = np.array(nlp(elem).vector)\n        if type(ls) == type([]):\n            ls_vec = self.compute_avg_vec(ls)\n        else:\n            ls_vec = np.array(nlp(ls).vector)\n        cosine = np.dot(elem_vec, ls_vec) / (norm(elem_vec) * norm(ls_vec))\n        return cosine\n    def similar(self, elem, ls, threshold):\n        return self.similarity(elem, ls) > threshold\n\n\n    def get_data(self, input): # TODO add regex for address and email\n        user_data = []\n        if self.get_current_question_name() == \"Adress\":\n            return [(\"Adress\", re.search(address_re, input).group())]\n        elif self.get_current_question_name() == \"E-Mail\":\n            return [(\"E-Mail\", re.search(mail_re, input).group())]\n\n        # check if we are only looking for regex and not the SpaCy model\n        current_question = self.get_current_question_data()\n        necessary_entities = [element for innerList in current_question[fun_num].keys() for element in\n                              innerList]\n        doc = nlp(input)\n        for entity in doc.ents:\n            for type in necessary_entities:\n                if entity.label_ == type:\n                    user_data.append(tuple((type, entity.text)))\n\n        # when filtering dates remove possibly created duplicates\n        user_data = list(set([i for i in user_data]))\n        return user_data\n\n    def map_data(self, data_dict, processed_input, question):\n        print('before mapped')\n        print(data)\n        for key, value in data_dict.items():\n            for inp in list(processed_input):\n                if inp[0] in key:\n                    data_dict[key] = inp[1]\n                    processed_input.remove(inp)\n                    break;\n        print('data_dict')\n        print(data_dict)\n        # check if all necessary information are given\n        for key, value in data_dict.items():\n            # value missing?\n            if value == None:\n                # until we have fitting input keep asking\n                while True:\n                    question_missing_info = 'The following information seems to be missing: ' + str(key[0]) + ' Please enter the information: \\n'\n                    processed_input = self.understanding(self.ask(question, question_missing_info))\n                    print(processed_input)\n                    if len(processed_input) != 0:\n                        data_dict[key] = processed_input[0][1]\n                        break;\n        print(data)\n    def sev_bullet_points(self, question):\n        counter = 0\n        position = self.get_current_stage_name()\n        if position == 'Education' or position == 'Experience':\n            while True:\n                inp = input('If you would like to add another ' + str(position) + 'step enter the '\n                                                                                  'information in '\n                                                                                  'the same format '\n                                                                                  'as already done. '\n                                                                                  'Otherwise press '\n                                                                                  'Enter' + \"\\n\")\n\n                if inp == \"\":\n                    break;\n                else:\n                    # process the given input\n                    processed_input = self.understanding(inp)\n\n                    # create new dictionary element\n\n                    stage = self.get_current_stage_data()\n                    stage[('Step' + str(counter + 2))] = [None,\n                                                          {(\"DATE\", \"CARDINAL\", '1'): None,\n                                                           (\"DATE\", \"CARDINAL\", '2'): None,\n                                                           (\"ORG\", \"\"): None}]\n                    self.add_question_to_history(('Step' + str(counter + 2)))\n                    current_question = self.get_current_question_data()\n                    data_dict = current_question[data_store]\n\n                    if debug:\n                        print(self.get_current_stage_data())\n                        print(self.get_current_question_name())\n                        print(data_dict)\n                        print(current_question)\n\n                    self.map_data(data_dict, processed_input, question)\n                if debug:\n                    print(data)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dialog.py b/dialog.py
--- a/dialog.py	(revision fb3c2f0b850e2538e8d38f5f0d949999db50994a)
+++ b/dialog.py	(date 1669646162652)
@@ -101,6 +101,8 @@
             answer = debug_data[self.get_current_stage()][question]
         else:
             if data_missing != None:
+                print(data_missing)
+                print(current_question[question_num])
                 answer = input(str(data_missing) + ' - question: - ' + current_question[question_num] + "\n")
             else:
                 answer = input(current_question[question_num] + "\n")
@@ -257,11 +259,13 @@
                     current_question = self.get_current_question_data()
                     data_dict = current_question[data_store]
 
-                    if debug:
-                        print(self.get_current_stage_data())
-                        print(self.get_current_question_name())
-                        print(data_dict)
-                        print(current_question)
+
+
+
+                    print(self.get_current_stage_data())
+                    print(self.get_current_question_name())
+                    print(data_dict)
+                    print(current_question)
 
                     self.map_data(data_dict, processed_input, question)
                 if debug:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"add printing etc\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/CV-Bot.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/CV-Bot.iml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/dialog.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/dialog.py\" afterDir=\"false\" />\n    </list>\n    <list id=\"d940c511-92f0-4fb1-bee5-601ff7e2efda\" name=\"Changes by danielbier\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Jupyter Notebook\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2GaQfpjOf9rEUTWkdg4KFLWfbUW\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/kraus/OneDrive/Uni/Semester 5 - Barcelona/Term 1/AI/P-03/reinforcement&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CV-Bot\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CV-Bot\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"5649b55e-c08f-47c7-b4e3-720abb9a88ae\" name=\"Changes\" comment=\"\" />\n      <created>1666624320371</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1666624320371</updated>\n      <workItem from=\"1666624324547\" duration=\"3914000\" />\n      <workItem from=\"1666707462917\" duration=\"24000\" />\n      <workItem from=\"1667220446521\" duration=\"2463000\" />\n      <workItem from=\"1668082266353\" duration=\"57000\" />\n      <workItem from=\"1668349949463\" duration=\"9077000\" />\n      <workItem from=\"1668771685506\" duration=\"47000\" />\n      <workItem from=\"1669282439560\" duration=\"10646000\" />\n      <workItem from=\"1669300612743\" duration=\"27000\" />\n      <workItem from=\"1669389294498\" duration=\"687000\" />\n      <workItem from=\"1669464900000\" duration=\"7630000\" />\n      <workItem from=\"1669628196853\" duration=\"6406000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"add readme.md\">\n      <created>1667490598481</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1667490598481</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"add readme.md\">\n      <created>1669470813553</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1669470813553</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"add readme.md\">\n      <created>1669470895329</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1669470895329</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"add printing etc\">\n      <created>1669478066049</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1669478066049</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"add readme.md\" />\n    <MESSAGE value=\"add printing etc\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add printing etc\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/CV_Bot$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1669645396027\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fb3c2f0b850e2538e8d38f5f0d949999db50994a)
+++ b/.idea/workspace.xml	(date 1669646162704)
@@ -4,9 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5649b55e-c08f-47c7-b4e3-720abb9a88ae" name="Changes" comment="add printing etc">
-      <change beforePath="$PROJECT_DIR$/.idea/CV-Bot.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/CV-Bot.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="5649b55e-c08f-47c7-b4e3-720abb9a88ae" name="Changes" comment="question for missing data">
       <change beforePath="$PROJECT_DIR$/dialog.py" beforeDir="false" afterPath="$PROJECT_DIR$/dialog.py" afterDir="false" />
     </list>
     <list id="d940c511-92f0-4fb1-bee5-601ff7e2efda" name="Changes by danielbier" comment="" />
@@ -143,7 +141,14 @@
       <option name="project" value="LOCAL" />
       <updated>1669478066049</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="question for missing data">
+      <created>1669645453028</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1669645453028</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -164,9 +169,10 @@
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="add readme.md" />
     <MESSAGE value="add printing etc" />
-    <option name="LAST_COMMIT_MESSAGE" value="add printing etc" />
+    <MESSAGE value="question for missing data" />
+    <option name="LAST_COMMIT_MESSAGE" value="question for missing data" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669645396027" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/CV_Bot$main.coverage" NAME="main Coverage Results" MODIFIED="1669645956472" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
